# -*- coding: utf-8 -*-
"""finalproject_kritika.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dk0z7fxqbWWaobdoJU7oldm9k3qNBUfj
"""

!pip install flask ngrok speechrecognition

!pip install pyngrok

from flask import Flask, request, render_template_string
from pyngrok import ngrok, conf
import speech_recognition as sr
import tempfile
import os
import threading

# Ngrok authtoken here
conf.get_default().auth_token = "343XUQRr7DGcWkwkWbbKvQcXFaK_4vSzSjKRV27Z9bPVFJosS"

app = Flask(__name__)

#  HTML template for upload interface
HTML = """
<!doctype html>
<title>Speech Recognition</title>
<h1>Upload a WAV file to transcribe</h1>
<form method=post enctype=multipart/form-data onsubmit="showUploadingMessage()">
  <input type=file name=file accept=".wav" required>
  <input type=submit value=Upload>
</form>

<p id="uploading" style="display:none;">Uploading... Please wait.</p>

{% if transcription %}
<h2>Transcription:</h2>
<p>{{ transcription }}</p>
{% endif %}

<script>
function showUploadingMessage() {
  document.getElementById('uploading').style.display = 'block';
}
</script>
"""

@app.route("/", methods=["GET", "POST"])
def index():
    transcription = None
    if request.method == "POST":
        file = request.files.get("file")
        if not file or file.filename == "":
            transcription = "No file uploaded"
        else:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp:
                file.save(tmp.name)
                tmp_path = tmp.name

            recognizer = sr.Recognizer()
            with sr.AudioFile(tmp_path) as source:
                audio_data = recognizer.record(source)

            try:
                transcription = recognizer.recognize_google(audio_data)
            except sr.UnknownValueError:
                transcription = "Could not understand audio"
            except sr.RequestError as e:
                transcription = f"Recognition error: {e}"
            finally:
                os.remove(tmp_path)

    return render_template_string(HTML, transcription=transcription)

def run_app():
    app.run(port=5000)

thread = threading.Thread(target=run_app)
thread.start()

#  Start Ngrok tunnel
public_url = ngrok.connect(5000)
print("Your app is live at:", public_url)